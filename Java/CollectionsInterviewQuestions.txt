1. Checked vs Unchecked Exceptions in Java.

2. How to make HashMap synchronized.
	
   Collections.synchronizedMap(hashmap);
   
3. Difference between HashMap and ConcurrentHashMap.

http://www.java67.com/2012/08/difference-between-hashmap-and-concurrentHashMap-java-collection.html

 You can make HashMap synchronized by wrapping it on Collections.synchornizedMap(HashMap) which will return a collection which is almost equivalent to Hashtable, where every modification operation on Map is locked on Map object while in case of ConcurrentHashMap, thread-safety is achieved by dividing whole Map into different partition based upon Concurrency level and only locking particular portion instead of locking the whole Map.

 ConcurrentHashMap is more scalable and performs better than Synchronized HashMap in the multi-threaded environment while in Single threaded environment both HashMap and ConcurrentHashMap gives comparable performance, where HashMap only slightly better.

4.Comparable vs Comparator in Java.

 A comparable object is capable of comparing itself with another object. The class itself must implements the java.lang.Comparable interface to compare its instances.
 
 Comparable<T>
 public int compareTo(T o);

 Comparator<T>
 public int compare(T o1, T o2);

5. Fail Fast And Fail Safe Iterators in Java.

 Iterators in java are used to iterate over the Collection objects.Fail-Fast iterators immediately throw ConcurrentModificationException if there is structural modification of the collection. Structural modification means adding, removing or updating any element from collection while a thread is iterating over that collection. Iterator on ArrayList, HashMap classes are some examples of fail-fast Iterator.

 Fail-Safe iterators don’t throw any exceptions if a collection is structurally modified while iterating over it. This is because, they operate on the clone of the collection, not on the original collection and that’s why they are called fail-safe iterators. Iterator on CopyOnWriteArrayList, ConcurrentHashMap classes are examples of fail-safe Iterator

 
 How Fail Fast Iterator works ?
 
 To know whether the collection is structurally modified or not, fail-fast iterators use an internal flag called modCount which is updated each time a collection is modified.Fail-fast iterators checks the modCount flag whenever it gets the next value (i.e. using next() method), and if it finds that the modCount has been modified after this iterator has been created, it throws ConcurrentModificationException.
 
  : The fail-fast behavior of an iterator cannot be guaranteed
    Fail-fast iterators throw ConcurrentModificationException on a best-effort basis
 
  : If you remove an element via Iterator remove() method, exception will not be thrown. However, in case of removing via a particular collection remove() method, ConcurrentModificationException will be thrown.
 
6.Implementation of Set/HashSet
 
 HashSet uses HashMap internally achieves uniqueness as keys in HashMap are unique.
 
 Actually when you are adding a line in HashSet like  hashset.add(3)   what java does internally is that it will put that element E here 3 as a key in the HashMap(created during HashSet object creation) and some dummy value that is Object's object is passed as a value to the key .
 
 When you pass duplicate elements in the add() method of the Set object , It will return false and do not add to the HashSet
